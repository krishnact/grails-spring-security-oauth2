import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
	repositories {
		maven { url "https://repo.grails.org/grails/core" }
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
		classpath "com.bertramlabs.plugins:asset-pipeline-gradle:3.2.4"
		classpath "org.asciidoctor:asciidoctor-gradle-jvm:3.3.2"
	}
}

version project.projectVersion
group = 'org.himalay.grails.plugins'

apply plugin:"eclipse"
apply plugin: "idea"
apply plugin: "java-library"
apply plugin: "org.grails.grails-plugin"
apply plugin: "org.grails.grails-gsp"
apply plugin: "org.grails.internal.grails-plugin-publish"
apply plugin: "asset-pipeline"
apply plugin: "org.asciidoctor.jvm.convert"

repositories {
	maven { url "https://repo.grails.org/grails/core" }
}

configurations {
	documentation
}

dependencies {
	compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
	compileOnly 'org.grails:grails-dependencies'
	compileOnly "org.grails:grails-plugin-services"
	api 'com.github.scribejava:scribejava-apis:6.8.1'
	api 'org.grails.plugins:spring-security-core:5.0.0'

	console "org.grails:grails-console"
	profile "org.grails.profiles:web-plugin"

	runtimeOnly "com.bertramlabs.plugins:asset-pipeline-grails:3.4.3"

	testImplementation "org.springframework.boot:spring-boot-autoconfigure"
	testImplementation "org.springframework.boot:spring-boot-starter-actuator"
	testImplementation "org.springframework.boot:spring-boot-starter-tomcat"
	testImplementation "cglib:cglib-nodep:2.2.2"
	testImplementation "org.grails:grails-gorm-testing-support"
	testImplementation "org.grails:grails-web-testing-support"

	documentation "com.github.javaparser:javaparser-core:3.15.14"
}

grailsPublish {
	githubSlug = 'grails/grails-spring-security-oauth2'
	license {
		name = 'Apache-2.0'
	}
	title = "Spring Security OAuth2"
	desc = """
	This plugin provides the capability to authenticate via oauth and depends on grails-spring-security-core.
"""
	developers = [
		MatrixCrawler: "Johannes Brunswicker",
		aitmanas: "aitmanas",
		rvanderwerf: "Ryan Vanderwerf",
		puneetbehl: "Puneet Behl"
	]
	userOrg = 'grails'
}


assets {
    packagePlugin = true
    minifyJs = true
    minifyCss = true
}

tasks.withType(Test) {
	useJUnitPlatform()
		testLogging {
			// set options for log level LIFECYCLE
			events TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
			showExceptions true
			showCauses true
			showStackTraces true

			// set options for log level DEBUG and INFO
			debug {
				events TestLogEvent.STARTED,
						TestLogEvent.FAILED,
						TestLogEvent.PASSED,
						TestLogEvent.SKIPPED,
						TestLogEvent.STANDARD_ERROR,
						TestLogEvent.STANDARD_OUT
				exceptionFormat TestExceptionFormat.FULL
			}
			info.events = debug.events
			info.exceptionFormat = debug.exceptionFormat

			afterSuite { desc, result ->
				if (!desc.parent) { // will match the outermost suite
					def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
					def startItem = '|  ', endItem = '  |'
					def repeatLength = startItem.length() + output.length() + endItem.length()
					println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
				}
			}
		}

}


def asciidoctorAttributes = [
		projectVersion  	: projectVersion,
		copyright           : 'Apache License, Version 2.0',
		docinfo1            : 'true',
		doctype             : 'book',
		encoding            : 'utf-8',
		'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
		icons               : 'font',
		id                  : project.name + ':' + project.version,
		idprefix            : '',
		idseparator         : '-',
		lang                : 'en',
		linkattrs           : true,
		numbered            : '',
		producer            : 'Asciidoctor',
		revnumber           : project.version,
		setanchors          : true,
		'source-highlighter' : 'prettify',
		toc                 : 'left',
		toc2                : '',
		toclevels           : '2'
]

asciidoctor {
	attributes asciidoctorAttributes
	baseDirFollowsSourceDir()
	outputDir new File(buildDir, 'docs')
	sourceDir = file('src/docs')
	sources {
		include 'index.adoc'
	}
}

tasks.register("docs") {
	description = "Generates documentation"
	group = "documentation"
	dependsOn(tasks.named("asciidoctor"))
	doLast {
		new File(buildDir, 'docs/ghpages.html') << file('src/docs/index.tmpl').text.replaceAll('@VERSION@', project.version)
	}
}

configure([groovydoc]) {
	classpath += configurations.documentation
}